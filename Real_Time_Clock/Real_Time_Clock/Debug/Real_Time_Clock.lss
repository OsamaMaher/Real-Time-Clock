
Real_Time_Clock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000846  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  00000846  000008da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  0080006a  0080006a  000008e4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000008e4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000914  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000120  00000000  00000000  00000950  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000013d3  00000000  00000000  00000a70  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008e6  00000000  00000000  00001e43  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000bf7  00000000  00000000  00002729  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001f8  00000000  00000000  00003320  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004d5  00000000  00000000  00003518  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c66  00000000  00000000  000039ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  00004653  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 ba 00 	jmp	0x174	; 0x174 <__ctors_end>
   4:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
   8:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
   c:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  10:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  14:	0c 94 f5 03 	jmp	0x7ea	; 0x7ea <__vector_5>
  18:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  1c:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  20:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  24:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  28:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  2c:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  30:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  34:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  38:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  3c:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  40:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  44:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  48:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  4c:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  50:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  54:	0e 01       	movw	r0, r28
  56:	27 01       	movw	r4, r14
  58:	40 01       	movw	r8, r0
  5a:	59 01       	movw	r10, r18
  5c:	71 01       	movw	r14, r2
  5e:	71 01       	movw	r14, r2
  60:	71 01       	movw	r14, r2
  62:	71 01       	movw	r14, r2
  64:	71 01       	movw	r14, r2
  66:	71 01       	movw	r14, r2
  68:	71 01       	movw	r14, r2
  6a:	71 01       	movw	r14, r2
  6c:	71 01       	movw	r14, r2
  6e:	71 01       	movw	r14, r2
  70:	71 01       	movw	r14, r2
  72:	71 01       	movw	r14, r2
  74:	71 01       	movw	r14, r2
  76:	71 01       	movw	r14, r2
  78:	71 01       	movw	r14, r2
  7a:	71 01       	movw	r14, r2
  7c:	71 01       	movw	r14, r2
  7e:	71 01       	movw	r14, r2
  80:	71 01       	movw	r14, r2
  82:	71 01       	movw	r14, r2
  84:	71 01       	movw	r14, r2
  86:	71 01       	movw	r14, r2
  88:	71 01       	movw	r14, r2
  8a:	71 01       	movw	r14, r2
  8c:	71 01       	movw	r14, r2
  8e:	71 01       	movw	r14, r2
  90:	71 01       	movw	r14, r2
  92:	71 01       	movw	r14, r2
  94:	0e 01       	movw	r0, r28
  96:	27 01       	movw	r4, r14
  98:	40 01       	movw	r8, r0
  9a:	59 01       	movw	r10, r18
  9c:	7e 01       	movw	r14, r28
  9e:	90 01       	movw	r18, r0
  a0:	a2 01       	movw	r20, r4
  a2:	b4 01       	movw	r22, r8
  a4:	c6 01       	movw	r24, r12
  a6:	c6 01       	movw	r24, r12
  a8:	c6 01       	movw	r24, r12
  aa:	c6 01       	movw	r24, r12
  ac:	c6 01       	movw	r24, r12
  ae:	c6 01       	movw	r24, r12
  b0:	c6 01       	movw	r24, r12
  b2:	c6 01       	movw	r24, r12
  b4:	c6 01       	movw	r24, r12
  b6:	c6 01       	movw	r24, r12
  b8:	c6 01       	movw	r24, r12
  ba:	c6 01       	movw	r24, r12
  bc:	c6 01       	movw	r24, r12
  be:	c6 01       	movw	r24, r12
  c0:	c6 01       	movw	r24, r12
  c2:	c6 01       	movw	r24, r12
  c4:	c6 01       	movw	r24, r12
  c6:	c6 01       	movw	r24, r12
  c8:	c6 01       	movw	r24, r12
  ca:	c6 01       	movw	r24, r12
  cc:	c6 01       	movw	r24, r12
  ce:	c6 01       	movw	r24, r12
  d0:	c6 01       	movw	r24, r12
  d2:	c6 01       	movw	r24, r12
  d4:	c6 01       	movw	r24, r12
  d6:	c6 01       	movw	r24, r12
  d8:	c6 01       	movw	r24, r12
  da:	c6 01       	movw	r24, r12
  dc:	7e 01       	movw	r14, r28
  de:	90 01       	movw	r18, r0
  e0:	a2 01       	movw	r20, r4
  e2:	b4 01       	movw	r22, r8
  e4:	d3 01       	movw	r26, r6
  e6:	da 01       	movw	r26, r20
  e8:	e1 01       	movw	r28, r2
  ea:	e8 01       	movw	r28, r16
  ec:	ee 01       	movw	r28, r28
  ee:	ee 01       	movw	r28, r28
  f0:	ee 01       	movw	r28, r28
  f2:	ee 01       	movw	r28, r28
  f4:	ee 01       	movw	r28, r28
  f6:	ee 01       	movw	r28, r28
  f8:	ee 01       	movw	r28, r28
  fa:	ee 01       	movw	r28, r28
  fc:	ee 01       	movw	r28, r28
  fe:	ee 01       	movw	r28, r28
 100:	ee 01       	movw	r28, r28
 102:	ee 01       	movw	r28, r28
 104:	ee 01       	movw	r28, r28
 106:	ee 01       	movw	r28, r28
 108:	ee 01       	movw	r28, r28
 10a:	ee 01       	movw	r28, r28
 10c:	ee 01       	movw	r28, r28
 10e:	ee 01       	movw	r28, r28
 110:	ee 01       	movw	r28, r28
 112:	ee 01       	movw	r28, r28
 114:	ee 01       	movw	r28, r28
 116:	ee 01       	movw	r28, r28
 118:	ee 01       	movw	r28, r28
 11a:	ee 01       	movw	r28, r28
 11c:	ee 01       	movw	r28, r28
 11e:	ee 01       	movw	r28, r28
 120:	ee 01       	movw	r28, r28
 122:	ee 01       	movw	r28, r28
 124:	d3 01       	movw	r26, r6
 126:	da 01       	movw	r26, r20
 128:	e1 01       	movw	r28, r2
 12a:	e8 01       	movw	r28, r16
 12c:	fa 01       	movw	r30, r20
 12e:	fc 01       	movw	r30, r24
 130:	fe 01       	movw	r30, r28
 132:	00 02       	muls	r16, r16
 134:	01 02       	muls	r16, r17
 136:	01 02       	muls	r16, r17
 138:	01 02       	muls	r16, r17
 13a:	01 02       	muls	r16, r17
 13c:	01 02       	muls	r16, r17
 13e:	01 02       	muls	r16, r17
 140:	01 02       	muls	r16, r17
 142:	01 02       	muls	r16, r17
 144:	01 02       	muls	r16, r17
 146:	01 02       	muls	r16, r17
 148:	01 02       	muls	r16, r17
 14a:	01 02       	muls	r16, r17
 14c:	01 02       	muls	r16, r17
 14e:	01 02       	muls	r16, r17
 150:	01 02       	muls	r16, r17
 152:	01 02       	muls	r16, r17
 154:	01 02       	muls	r16, r17
 156:	01 02       	muls	r16, r17
 158:	01 02       	muls	r16, r17
 15a:	01 02       	muls	r16, r17
 15c:	01 02       	muls	r16, r17
 15e:	01 02       	muls	r16, r17
 160:	01 02       	muls	r16, r17
 162:	01 02       	muls	r16, r17
 164:	01 02       	muls	r16, r17
 166:	01 02       	muls	r16, r17
 168:	01 02       	muls	r16, r17
 16a:	01 02       	muls	r16, r17
 16c:	fa 01       	movw	r30, r20
 16e:	fc 01       	movw	r30, r24
 170:	fe 01       	movw	r30, r28
 172:	00 02       	muls	r16, r16

00000174 <__ctors_end>:
 174:	11 24       	eor	r1, r1
 176:	1f be       	out	0x3f, r1	; 63
 178:	cf e5       	ldi	r28, 0x5F	; 95
 17a:	d8 e0       	ldi	r29, 0x08	; 8
 17c:	de bf       	out	0x3e, r29	; 62
 17e:	cd bf       	out	0x3d, r28	; 61

00000180 <__do_copy_data>:
 180:	10 e0       	ldi	r17, 0x00	; 0
 182:	a0 e6       	ldi	r26, 0x60	; 96
 184:	b0 e0       	ldi	r27, 0x00	; 0
 186:	e6 e4       	ldi	r30, 0x46	; 70
 188:	f8 e0       	ldi	r31, 0x08	; 8
 18a:	02 c0       	rjmp	.+4      	; 0x190 <__do_copy_data+0x10>
 18c:	05 90       	lpm	r0, Z+
 18e:	0d 92       	st	X+, r0
 190:	aa 36       	cpi	r26, 0x6A	; 106
 192:	b1 07       	cpc	r27, r17
 194:	d9 f7       	brne	.-10     	; 0x18c <__do_copy_data+0xc>

00000196 <__do_clear_bss>:
 196:	20 e0       	ldi	r18, 0x00	; 0
 198:	aa e6       	ldi	r26, 0x6A	; 106
 19a:	b0 e0       	ldi	r27, 0x00	; 0
 19c:	01 c0       	rjmp	.+2      	; 0x1a0 <.do_clear_bss_start>

0000019e <.do_clear_bss_loop>:
 19e:	1d 92       	st	X+, r1

000001a0 <.do_clear_bss_start>:
 1a0:	ad 36       	cpi	r26, 0x6D	; 109
 1a2:	b2 07       	cpc	r27, r18
 1a4:	e1 f7       	brne	.-8      	; 0x19e <.do_clear_bss_loop>
 1a6:	0e 94 02 02 	call	0x404	; 0x404 <main>
 1aa:	0c 94 21 04 	jmp	0x842	; 0x842 <_exit>

000001ae <__bad_interrupt>:
 1ae:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001b2 <segments_dir_init>:
#include "DIO.h"
#include "MACROS.h"

void segments_dir_init(unsigned char port)
{
	DIO_SET_PORT_DIR(port, 1);
 1b2:	61 e0       	ldi	r22, 0x01	; 1
 1b4:	0e 94 c8 01 	call	0x390	; 0x390 <DIO_SET_PORT_DIR>
 1b8:	08 95       	ret

000001ba <segments_write>:
}

void segments_write(unsigned char port, unsigned char value)
{
 1ba:	cf 93       	push	r28
 1bc:	df 93       	push	r29
 1be:	cd b7       	in	r28, 0x3d	; 61
 1c0:	de b7       	in	r29, 0x3e	; 62
 1c2:	2a 97       	sbiw	r28, 0x0a	; 10
 1c4:	0f b6       	in	r0, 0x3f	; 63
 1c6:	f8 94       	cli
 1c8:	de bf       	out	0x3e, r29	; 62
 1ca:	0f be       	out	0x3f, r0	; 63
 1cc:	cd bf       	out	0x3d, r28	; 61
	unsigned char C[] = {0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x07, 0x7F, 0x6F};
 1ce:	9a e0       	ldi	r25, 0x0A	; 10
 1d0:	e0 e6       	ldi	r30, 0x60	; 96
 1d2:	f0 e0       	ldi	r31, 0x00	; 0
 1d4:	de 01       	movw	r26, r28
 1d6:	11 96       	adiw	r26, 0x01	; 1
 1d8:	01 90       	ld	r0, Z+
 1da:	0d 92       	st	X+, r0
 1dc:	9a 95       	dec	r25
 1de:	e1 f7       	brne	.-8      	; 0x1d8 <segments_write+0x1e>
	DIO_PORT_WRITE(port, C[value]);
 1e0:	e1 e0       	ldi	r30, 0x01	; 1
 1e2:	f0 e0       	ldi	r31, 0x00	; 0
 1e4:	ec 0f       	add	r30, r28
 1e6:	fd 1f       	adc	r31, r29
 1e8:	e6 0f       	add	r30, r22
 1ea:	f1 1d       	adc	r31, r1
 1ec:	60 81       	ld	r22, Z
 1ee:	0e 94 ef 01 	call	0x3de	; 0x3de <DIO_PORT_WRITE>
}
 1f2:	2a 96       	adiw	r28, 0x0a	; 10
 1f4:	0f b6       	in	r0, 0x3f	; 63
 1f6:	f8 94       	cli
 1f8:	de bf       	out	0x3e, r29	; 62
 1fa:	0f be       	out	0x3f, r0	; 63
 1fc:	cd bf       	out	0x3d, r28	; 61
 1fe:	df 91       	pop	r29
 200:	cf 91       	pop	r28
 202:	08 95       	ret

00000204 <DIO_SETPINDIR>:
			break;
		}
		case 'D':
		case 'd':
		{
			TOG_BIT(PORTD, pin);
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	fc 01       	movw	r30, r24
 208:	e1 54       	subi	r30, 0x41	; 65
 20a:	f1 09       	sbc	r31, r1
 20c:	e4 32       	cpi	r30, 0x24	; 36
 20e:	f1 05       	cpc	r31, r1
 210:	08 f0       	brcs	.+2      	; 0x214 <DIO_SETPINDIR+0x10>
 212:	67 c0       	rjmp	.+206    	; 0x2e2 <DIO_SETPINDIR+0xde>
 214:	e6 5d       	subi	r30, 0xD6	; 214
 216:	ff 4f       	sbci	r31, 0xFF	; 255
 218:	0c 94 1b 04 	jmp	0x836	; 0x836 <__tablejump2__>
 21c:	41 30       	cpi	r20, 0x01	; 1
 21e:	59 f4       	brne	.+22     	; 0x236 <DIO_SETPINDIR+0x32>
 220:	2a b3       	in	r18, 0x1a	; 26
 222:	81 e0       	ldi	r24, 0x01	; 1
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	02 c0       	rjmp	.+4      	; 0x22c <DIO_SETPINDIR+0x28>
 228:	88 0f       	add	r24, r24
 22a:	99 1f       	adc	r25, r25
 22c:	6a 95       	dec	r22
 22e:	e2 f7       	brpl	.-8      	; 0x228 <DIO_SETPINDIR+0x24>
 230:	82 2b       	or	r24, r18
 232:	8a bb       	out	0x1a, r24	; 26
 234:	08 95       	ret
 236:	2a b3       	in	r18, 0x1a	; 26
 238:	81 e0       	ldi	r24, 0x01	; 1
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	02 c0       	rjmp	.+4      	; 0x242 <DIO_SETPINDIR+0x3e>
 23e:	88 0f       	add	r24, r24
 240:	99 1f       	adc	r25, r25
 242:	6a 95       	dec	r22
 244:	e2 f7       	brpl	.-8      	; 0x23e <DIO_SETPINDIR+0x3a>
 246:	80 95       	com	r24
 248:	82 23       	and	r24, r18
 24a:	8a bb       	out	0x1a, r24	; 26
 24c:	08 95       	ret
 24e:	41 30       	cpi	r20, 0x01	; 1
 250:	59 f4       	brne	.+22     	; 0x268 <DIO_SETPINDIR+0x64>
 252:	27 b3       	in	r18, 0x17	; 23
 254:	81 e0       	ldi	r24, 0x01	; 1
 256:	90 e0       	ldi	r25, 0x00	; 0
 258:	02 c0       	rjmp	.+4      	; 0x25e <DIO_SETPINDIR+0x5a>
 25a:	88 0f       	add	r24, r24
 25c:	99 1f       	adc	r25, r25
 25e:	6a 95       	dec	r22
 260:	e2 f7       	brpl	.-8      	; 0x25a <DIO_SETPINDIR+0x56>
 262:	82 2b       	or	r24, r18
 264:	87 bb       	out	0x17, r24	; 23
 266:	08 95       	ret
 268:	27 b3       	in	r18, 0x17	; 23
 26a:	81 e0       	ldi	r24, 0x01	; 1
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	02 c0       	rjmp	.+4      	; 0x274 <DIO_SETPINDIR+0x70>
 270:	88 0f       	add	r24, r24
 272:	99 1f       	adc	r25, r25
 274:	6a 95       	dec	r22
 276:	e2 f7       	brpl	.-8      	; 0x270 <DIO_SETPINDIR+0x6c>
 278:	80 95       	com	r24
 27a:	82 23       	and	r24, r18
 27c:	87 bb       	out	0x17, r24	; 23
 27e:	08 95       	ret
 280:	41 30       	cpi	r20, 0x01	; 1
 282:	59 f4       	brne	.+22     	; 0x29a <DIO_SETPINDIR+0x96>
 284:	24 b3       	in	r18, 0x14	; 20
 286:	81 e0       	ldi	r24, 0x01	; 1
 288:	90 e0       	ldi	r25, 0x00	; 0
 28a:	02 c0       	rjmp	.+4      	; 0x290 <DIO_SETPINDIR+0x8c>
 28c:	88 0f       	add	r24, r24
 28e:	99 1f       	adc	r25, r25
 290:	6a 95       	dec	r22
 292:	e2 f7       	brpl	.-8      	; 0x28c <DIO_SETPINDIR+0x88>
 294:	82 2b       	or	r24, r18
 296:	84 bb       	out	0x14, r24	; 20
 298:	08 95       	ret
 29a:	24 b3       	in	r18, 0x14	; 20
 29c:	81 e0       	ldi	r24, 0x01	; 1
 29e:	90 e0       	ldi	r25, 0x00	; 0
 2a0:	02 c0       	rjmp	.+4      	; 0x2a6 <DIO_SETPINDIR+0xa2>
 2a2:	88 0f       	add	r24, r24
 2a4:	99 1f       	adc	r25, r25
 2a6:	6a 95       	dec	r22
 2a8:	e2 f7       	brpl	.-8      	; 0x2a2 <DIO_SETPINDIR+0x9e>
 2aa:	80 95       	com	r24
 2ac:	82 23       	and	r24, r18
 2ae:	84 bb       	out	0x14, r24	; 20
 2b0:	08 95       	ret
 2b2:	41 30       	cpi	r20, 0x01	; 1
 2b4:	59 f4       	brne	.+22     	; 0x2cc <DIO_SETPINDIR+0xc8>
 2b6:	21 b3       	in	r18, 0x11	; 17
 2b8:	81 e0       	ldi	r24, 0x01	; 1
 2ba:	90 e0       	ldi	r25, 0x00	; 0
 2bc:	02 c0       	rjmp	.+4      	; 0x2c2 <DIO_SETPINDIR+0xbe>
 2be:	88 0f       	add	r24, r24
 2c0:	99 1f       	adc	r25, r25
 2c2:	6a 95       	dec	r22
 2c4:	e2 f7       	brpl	.-8      	; 0x2be <DIO_SETPINDIR+0xba>
 2c6:	82 2b       	or	r24, r18
 2c8:	81 bb       	out	0x11, r24	; 17
 2ca:	08 95       	ret
 2cc:	21 b3       	in	r18, 0x11	; 17
 2ce:	81 e0       	ldi	r24, 0x01	; 1
 2d0:	90 e0       	ldi	r25, 0x00	; 0
 2d2:	02 c0       	rjmp	.+4      	; 0x2d8 <DIO_SETPINDIR+0xd4>
 2d4:	88 0f       	add	r24, r24
 2d6:	99 1f       	adc	r25, r25
 2d8:	6a 95       	dec	r22
 2da:	e2 f7       	brpl	.-8      	; 0x2d4 <DIO_SETPINDIR+0xd0>
 2dc:	80 95       	com	r24
 2de:	82 23       	and	r24, r18
 2e0:	81 bb       	out	0x11, r24	; 17
 2e2:	08 95       	ret

000002e4 <DIO_READ>:
 2e4:	90 e0       	ldi	r25, 0x00	; 0
 2e6:	fc 01       	movw	r30, r24
 2e8:	e1 54       	subi	r30, 0x41	; 65
 2ea:	f1 09       	sbc	r31, r1
 2ec:	e4 32       	cpi	r30, 0x24	; 36
 2ee:	f1 05       	cpc	r31, r1
 2f0:	08 f0       	brcs	.+2      	; 0x2f4 <DIO_READ+0x10>
 2f2:	4c c0       	rjmp	.+152    	; 0x38c <DIO_READ+0xa8>
 2f4:	e2 5b       	subi	r30, 0xB2	; 178
 2f6:	ff 4f       	sbci	r31, 0xFF	; 255
 2f8:	0c 94 1b 04 	jmp	0x836	; 0x836 <__tablejump2__>
 2fc:	29 b3       	in	r18, 0x19	; 25
 2fe:	81 e0       	ldi	r24, 0x01	; 1
 300:	90 e0       	ldi	r25, 0x00	; 0
 302:	06 2e       	mov	r0, r22
 304:	02 c0       	rjmp	.+4      	; 0x30a <DIO_READ+0x26>
 306:	88 0f       	add	r24, r24
 308:	99 1f       	adc	r25, r25
 30a:	0a 94       	dec	r0
 30c:	e2 f7       	brpl	.-8      	; 0x306 <DIO_READ+0x22>
 30e:	30 e0       	ldi	r19, 0x00	; 0
 310:	82 23       	and	r24, r18
 312:	93 23       	and	r25, r19
 314:	02 c0       	rjmp	.+4      	; 0x31a <DIO_READ+0x36>
 316:	95 95       	asr	r25
 318:	87 95       	ror	r24
 31a:	6a 95       	dec	r22
 31c:	e2 f7       	brpl	.-8      	; 0x316 <DIO_READ+0x32>
 31e:	08 95       	ret
 320:	26 b3       	in	r18, 0x16	; 22
 322:	81 e0       	ldi	r24, 0x01	; 1
 324:	90 e0       	ldi	r25, 0x00	; 0
 326:	06 2e       	mov	r0, r22
 328:	02 c0       	rjmp	.+4      	; 0x32e <DIO_READ+0x4a>
 32a:	88 0f       	add	r24, r24
 32c:	99 1f       	adc	r25, r25
 32e:	0a 94       	dec	r0
 330:	e2 f7       	brpl	.-8      	; 0x32a <DIO_READ+0x46>
 332:	30 e0       	ldi	r19, 0x00	; 0
 334:	82 23       	and	r24, r18
 336:	93 23       	and	r25, r19
 338:	02 c0       	rjmp	.+4      	; 0x33e <DIO_READ+0x5a>
 33a:	95 95       	asr	r25
 33c:	87 95       	ror	r24
 33e:	6a 95       	dec	r22
 340:	e2 f7       	brpl	.-8      	; 0x33a <DIO_READ+0x56>
 342:	08 95       	ret
 344:	23 b3       	in	r18, 0x13	; 19
 346:	81 e0       	ldi	r24, 0x01	; 1
 348:	90 e0       	ldi	r25, 0x00	; 0
 34a:	06 2e       	mov	r0, r22
 34c:	02 c0       	rjmp	.+4      	; 0x352 <DIO_READ+0x6e>
 34e:	88 0f       	add	r24, r24
 350:	99 1f       	adc	r25, r25
 352:	0a 94       	dec	r0
 354:	e2 f7       	brpl	.-8      	; 0x34e <DIO_READ+0x6a>
 356:	30 e0       	ldi	r19, 0x00	; 0
 358:	82 23       	and	r24, r18
 35a:	93 23       	and	r25, r19
 35c:	02 c0       	rjmp	.+4      	; 0x362 <DIO_READ+0x7e>
 35e:	95 95       	asr	r25
 360:	87 95       	ror	r24
 362:	6a 95       	dec	r22
 364:	e2 f7       	brpl	.-8      	; 0x35e <DIO_READ+0x7a>
 366:	08 95       	ret
 368:	20 b3       	in	r18, 0x10	; 16
 36a:	81 e0       	ldi	r24, 0x01	; 1
 36c:	90 e0       	ldi	r25, 0x00	; 0
 36e:	06 2e       	mov	r0, r22
 370:	02 c0       	rjmp	.+4      	; 0x376 <DIO_READ+0x92>
 372:	88 0f       	add	r24, r24
 374:	99 1f       	adc	r25, r25
 376:	0a 94       	dec	r0
 378:	e2 f7       	brpl	.-8      	; 0x372 <DIO_READ+0x8e>
 37a:	30 e0       	ldi	r19, 0x00	; 0
 37c:	82 23       	and	r24, r18
 37e:	93 23       	and	r25, r19
 380:	02 c0       	rjmp	.+4      	; 0x386 <DIO_READ+0xa2>
 382:	95 95       	asr	r25
 384:	87 95       	ror	r24
 386:	6a 95       	dec	r22
 388:	e2 f7       	brpl	.-8      	; 0x382 <DIO_READ+0x9e>
 38a:	08 95       	ret
 38c:	80 e0       	ldi	r24, 0x00	; 0
 38e:	08 95       	ret

00000390 <DIO_SET_PORT_DIR>:
 390:	90 e0       	ldi	r25, 0x00	; 0
 392:	fc 01       	movw	r30, r24
 394:	e1 54       	subi	r30, 0x41	; 65
 396:	f1 09       	sbc	r31, r1
 398:	e4 32       	cpi	r30, 0x24	; 36
 39a:	f1 05       	cpc	r31, r1
 39c:	f8 f4       	brcc	.+62     	; 0x3dc <DIO_SET_PORT_DIR+0x4c>
 39e:	ee 58       	subi	r30, 0x8E	; 142
 3a0:	ff 4f       	sbci	r31, 0xFF	; 255
 3a2:	0c 94 1b 04 	jmp	0x836	; 0x836 <__tablejump2__>
 3a6:	61 30       	cpi	r22, 0x01	; 1
 3a8:	19 f4       	brne	.+6      	; 0x3b0 <DIO_SET_PORT_DIR+0x20>
 3aa:	8f ef       	ldi	r24, 0xFF	; 255
 3ac:	8a bb       	out	0x1a, r24	; 26
 3ae:	08 95       	ret
 3b0:	1a ba       	out	0x1a, r1	; 26
 3b2:	08 95       	ret
 3b4:	61 30       	cpi	r22, 0x01	; 1
 3b6:	19 f4       	brne	.+6      	; 0x3be <DIO_SET_PORT_DIR+0x2e>
 3b8:	8f ef       	ldi	r24, 0xFF	; 255
 3ba:	87 bb       	out	0x17, r24	; 23
 3bc:	08 95       	ret
 3be:	17 ba       	out	0x17, r1	; 23
 3c0:	08 95       	ret
 3c2:	61 30       	cpi	r22, 0x01	; 1
 3c4:	19 f4       	brne	.+6      	; 0x3cc <DIO_SET_PORT_DIR+0x3c>
 3c6:	8f ef       	ldi	r24, 0xFF	; 255
 3c8:	84 bb       	out	0x14, r24	; 20
 3ca:	08 95       	ret
 3cc:	14 ba       	out	0x14, r1	; 20
 3ce:	08 95       	ret
 3d0:	61 30       	cpi	r22, 0x01	; 1
 3d2:	19 f4       	brne	.+6      	; 0x3da <DIO_SET_PORT_DIR+0x4a>
 3d4:	8f ef       	ldi	r24, 0xFF	; 255
 3d6:	81 bb       	out	0x11, r24	; 17
 3d8:	08 95       	ret
 3da:	11 ba       	out	0x11, r1	; 17
 3dc:	08 95       	ret

000003de <DIO_PORT_WRITE>:
	}
}

void DIO_PORT_WRITE(unsigned char port, unsigned char value)
{
	switch (port)
 3de:	90 e0       	ldi	r25, 0x00	; 0
 3e0:	fc 01       	movw	r30, r24
 3e2:	e1 54       	subi	r30, 0x41	; 65
 3e4:	f1 09       	sbc	r31, r1
 3e6:	e4 32       	cpi	r30, 0x24	; 36
 3e8:	f1 05       	cpc	r31, r1
 3ea:	58 f4       	brcc	.+22     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 3ec:	ea 56       	subi	r30, 0x6A	; 106
 3ee:	ff 4f       	sbci	r31, 0xFF	; 255
 3f0:	0c 94 1b 04 	jmp	0x836	; 0x836 <__tablejump2__>
	{
		case 'A':
		case 'a':
		{
			PORTA = value;
 3f4:	6b bb       	out	0x1b, r22	; 27
			break;
 3f6:	08 95       	ret
		}
		case 'B':
		case 'b':
		{
			PORTB = value;
 3f8:	68 bb       	out	0x18, r22	; 24
			break;
 3fa:	08 95       	ret
		}
		case 'C':
		case 'c':
		{
			PORTC = value;
 3fc:	65 bb       	out	0x15, r22	; 21
			break;
 3fe:	08 95       	ret
		}
		case 'D':
		case 'd':
		{
			PORTD = value;
 400:	62 bb       	out	0x12, r22	; 18
 402:	08 95       	ret

00000404 <main>:
volatile unsigned char Sec=0;
unsigned char min=0,hour=0;

int main(void)
{
	Timer2_OVF_init_interrupt();
 404:	0e 94 0d 04 	call	0x81a	; 0x81a <Timer2_OVF_init_interrupt>
	segments_dir_init('D');
 408:	84 e4       	ldi	r24, 0x44	; 68
 40a:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <segments_dir_init>
	BUTTON_INIT('B',0);
 40e:	60 e0       	ldi	r22, 0x00	; 0
 410:	82 e4       	ldi	r24, 0x42	; 66
 412:	0e 94 06 04 	call	0x80c	; 0x80c <BUTTON_INIT>
	BUTTON_INIT('B',1);
 416:	61 e0       	ldi	r22, 0x01	; 1
 418:	82 e4       	ldi	r24, 0x42	; 66
 41a:	0e 94 06 04 	call	0x80c	; 0x80c <BUTTON_INIT>
	SET_BIT(DDRC,6);
 41e:	a6 9a       	sbi	0x14, 6	; 20
	SET_BIT(DDRC,7);
 420:	a7 9a       	sbi	0x14, 7	; 20
	SET_BIT(DDRA,0);
 422:	d0 9a       	sbi	0x1a, 0	; 26
	SET_BIT(DDRA,1);
 424:	d1 9a       	sbi	0x1a, 1	; 26
	SET_BIT(DDRA,2);
 426:	d2 9a       	sbi	0x1a, 2	; 26
	SET_BIT(DDRA,3);
 428:	d3 9a       	sbi	0x1a, 3	; 26
	SET_BIT(DDRA,4);
 42a:	d4 9a       	sbi	0x1a, 4	; 26
	SET_BIT(DDRA,5);
 42c:	d5 9a       	sbi	0x1a, 5	; 26
				SET_BIT(PORTA,1);
				SET_BIT(PORTA,2);
				SET_BIT(PORTA,3);
				CLR_BIT(PORTA,4);
				SET_BIT(PORTA,5);
				segments_write('D', hour%10);
 42e:	cd ec       	ldi	r28, 0xCD	; 205
	SET_BIT(DDRA,4);
	SET_BIT(DDRA,5);
	
    while (1) 
    {
		if (BUTTON_READ('B',0)==1)
 430:	60 e0       	ldi	r22, 0x00	; 0
 432:	82 e4       	ldi	r24, 0x42	; 66
 434:	0e 94 0a 04 	call	0x814	; 0x814 <BUTTON_READ>
 438:	81 30       	cpi	r24, 0x01	; 1
 43a:	09 f0       	breq	.+2      	; 0x43e <main+0x3a>
 43c:	1e c1       	rjmp	.+572    	; 0x67a <main+0x276>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 43e:	2f e7       	ldi	r18, 0x7F	; 127
 440:	8a e1       	ldi	r24, 0x1A	; 26
 442:	96 e0       	ldi	r25, 0x06	; 6
 444:	21 50       	subi	r18, 0x01	; 1
 446:	80 40       	sbci	r24, 0x00	; 0
 448:	90 40       	sbci	r25, 0x00	; 0
 44a:	e1 f7       	brne	.-8      	; 0x444 <main+0x40>
 44c:	00 c0       	rjmp	.+0      	; 0x44e <main+0x4a>
 44e:	00 00       	nop
		{
			_delay_ms(250);
			hour=0; min=0; Sec=0;
 450:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <__data_end>
 454:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <min>
 458:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <Sec>
			do 
			{
				if (BUTTON_READ('B',1)==1)
 45c:	61 e0       	ldi	r22, 0x01	; 1
 45e:	82 e4       	ldi	r24, 0x42	; 66
 460:	0e 94 0a 04 	call	0x814	; 0x814 <BUTTON_READ>
 464:	81 30       	cpi	r24, 0x01	; 1
 466:	99 f4       	brne	.+38     	; 0x48e <main+0x8a>
				{
					hour++;
 468:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__data_end>
 46c:	8f 5f       	subi	r24, 0xFF	; 255
					if (hour==24)
 46e:	88 31       	cpi	r24, 0x18	; 24
 470:	19 f0       	breq	.+6      	; 0x478 <main+0x74>
			hour=0; min=0; Sec=0;
			do 
			{
				if (BUTTON_READ('B',1)==1)
				{
					hour++;
 472:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__data_end>
 476:	02 c0       	rjmp	.+4      	; 0x47c <main+0x78>
					if (hour==24)
					{
						hour=0;
 478:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <__data_end>
 47c:	2f e7       	ldi	r18, 0x7F	; 127
 47e:	8a e1       	ldi	r24, 0x1A	; 26
 480:	96 e0       	ldi	r25, 0x06	; 6
 482:	21 50       	subi	r18, 0x01	; 1
 484:	80 40       	sbci	r24, 0x00	; 0
 486:	90 40       	sbci	r25, 0x00	; 0
 488:	e1 f7       	brne	.-8      	; 0x482 <main+0x7e>
 48a:	00 c0       	rjmp	.+0      	; 0x48c <main+0x88>
 48c:	00 00       	nop
					}
					_delay_ms(250);
				}
				SET_BIT(PORTA,0);
 48e:	d8 9a       	sbi	0x1b, 0	; 27
				SET_BIT(PORTA,1);
 490:	d9 9a       	sbi	0x1b, 1	; 27
				SET_BIT(PORTA,2);
 492:	da 9a       	sbi	0x1b, 2	; 27
				SET_BIT(PORTA,3);
 494:	db 9a       	sbi	0x1b, 3	; 27
				CLR_BIT(PORTA,4);
 496:	dc 98       	cbi	0x1b, 4	; 27
				SET_BIT(PORTA,5);
 498:	dd 9a       	sbi	0x1b, 5	; 27
				segments_write('D', hour%10);
 49a:	60 91 6a 00 	lds	r22, 0x006A	; 0x80006a <__data_end>
 49e:	6c 9f       	mul	r22, r28
 4a0:	81 2d       	mov	r24, r1
 4a2:	11 24       	eor	r1, r1
 4a4:	86 95       	lsr	r24
 4a6:	86 95       	lsr	r24
 4a8:	86 95       	lsr	r24
 4aa:	88 0f       	add	r24, r24
 4ac:	98 2f       	mov	r25, r24
 4ae:	99 0f       	add	r25, r25
 4b0:	99 0f       	add	r25, r25
 4b2:	89 0f       	add	r24, r25
 4b4:	68 1b       	sub	r22, r24
 4b6:	84 e4       	ldi	r24, 0x44	; 68
 4b8:	0e 94 dd 00 	call	0x1ba	; 0x1ba <segments_write>
 4bc:	8f e0       	ldi	r24, 0x0F	; 15
 4be:	97 e2       	ldi	r25, 0x27	; 39
 4c0:	01 97       	sbiw	r24, 0x01	; 1
 4c2:	f1 f7       	brne	.-4      	; 0x4c0 <main+0xbc>
 4c4:	00 c0       	rjmp	.+0      	; 0x4c6 <main+0xc2>
 4c6:	00 00       	nop
				_delay_ms(5);
				SET_BIT(PORTA,0);
 4c8:	d8 9a       	sbi	0x1b, 0	; 27
				SET_BIT(PORTA,1);
 4ca:	d9 9a       	sbi	0x1b, 1	; 27
				SET_BIT(PORTA,2);
 4cc:	da 9a       	sbi	0x1b, 2	; 27
				SET_BIT(PORTA,3);
 4ce:	db 9a       	sbi	0x1b, 3	; 27
				SET_BIT(PORTA,4);
 4d0:	dc 9a       	sbi	0x1b, 4	; 27
				CLR_BIT(PORTA,5);
 4d2:	dd 98       	cbi	0x1b, 5	; 27
				segments_write('D', hour/10);
 4d4:	60 91 6a 00 	lds	r22, 0x006A	; 0x80006a <__data_end>
 4d8:	6c 9f       	mul	r22, r28
 4da:	61 2d       	mov	r22, r1
 4dc:	11 24       	eor	r1, r1
 4de:	66 95       	lsr	r22
 4e0:	66 95       	lsr	r22
 4e2:	66 95       	lsr	r22
 4e4:	84 e4       	ldi	r24, 0x44	; 68
 4e6:	0e 94 dd 00 	call	0x1ba	; 0x1ba <segments_write>
 4ea:	8f e0       	ldi	r24, 0x0F	; 15
 4ec:	97 e2       	ldi	r25, 0x27	; 39
 4ee:	01 97       	sbiw	r24, 0x01	; 1
 4f0:	f1 f7       	brne	.-4      	; 0x4ee <main+0xea>
 4f2:	00 c0       	rjmp	.+0      	; 0x4f4 <main+0xf0>
 4f4:	00 00       	nop
				_delay_ms(5);
			} while (BUTTON_READ('B',0)==0);
 4f6:	60 e0       	ldi	r22, 0x00	; 0
 4f8:	82 e4       	ldi	r24, 0x42	; 66
 4fa:	0e 94 0a 04 	call	0x814	; 0x814 <BUTTON_READ>
 4fe:	88 23       	and	r24, r24
 500:	09 f4       	brne	.+2      	; 0x504 <main+0x100>
 502:	ac cf       	rjmp	.-168    	; 0x45c <main+0x58>
 504:	9f e7       	ldi	r25, 0x7F	; 127
 506:	2a e1       	ldi	r18, 0x1A	; 26
 508:	86 e0       	ldi	r24, 0x06	; 6
 50a:	91 50       	subi	r25, 0x01	; 1
 50c:	20 40       	sbci	r18, 0x00	; 0
 50e:	80 40       	sbci	r24, 0x00	; 0
 510:	e1 f7       	brne	.-8      	; 0x50a <main+0x106>
 512:	00 c0       	rjmp	.+0      	; 0x514 <main+0x110>
 514:	00 00       	nop
			_delay_ms(250);
			do
			{
				if (BUTTON_READ('B',1)==1)
 516:	61 e0       	ldi	r22, 0x01	; 1
 518:	82 e4       	ldi	r24, 0x42	; 66
 51a:	0e 94 0a 04 	call	0x814	; 0x814 <BUTTON_READ>
 51e:	81 30       	cpi	r24, 0x01	; 1
 520:	99 f4       	brne	.+38     	; 0x548 <main+0x144>
				{
					min++;
 522:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <min>
 526:	8f 5f       	subi	r24, 0xFF	; 255
					if (min==60)
 528:	8c 33       	cpi	r24, 0x3C	; 60
 52a:	19 f0       	breq	.+6      	; 0x532 <main+0x12e>
			_delay_ms(250);
			do
			{
				if (BUTTON_READ('B',1)==1)
				{
					min++;
 52c:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <min>
 530:	02 c0       	rjmp	.+4      	; 0x536 <main+0x132>
					if (min==60)
					{
						min=0;
 532:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <min>
 536:	9f e7       	ldi	r25, 0x7F	; 127
 538:	2a e1       	ldi	r18, 0x1A	; 26
 53a:	86 e0       	ldi	r24, 0x06	; 6
 53c:	91 50       	subi	r25, 0x01	; 1
 53e:	20 40       	sbci	r18, 0x00	; 0
 540:	80 40       	sbci	r24, 0x00	; 0
 542:	e1 f7       	brne	.-8      	; 0x53c <main+0x138>
 544:	00 c0       	rjmp	.+0      	; 0x546 <main+0x142>
 546:	00 00       	nop
					}
					_delay_ms(250);
				}
				SET_BIT(PORTA,0);
 548:	d8 9a       	sbi	0x1b, 0	; 27
				SET_BIT(PORTA,1);
 54a:	d9 9a       	sbi	0x1b, 1	; 27
				CLR_BIT(PORTA,2);
 54c:	da 98       	cbi	0x1b, 2	; 27
				SET_BIT(PORTA,3);
 54e:	db 9a       	sbi	0x1b, 3	; 27
				SET_BIT(PORTA,4);
 550:	dc 9a       	sbi	0x1b, 4	; 27
				SET_BIT(PORTA,5);
 552:	dd 9a       	sbi	0x1b, 5	; 27
				segments_write('D', min%10);
 554:	60 91 6b 00 	lds	r22, 0x006B	; 0x80006b <min>
 558:	6c 9f       	mul	r22, r28
 55a:	81 2d       	mov	r24, r1
 55c:	11 24       	eor	r1, r1
 55e:	86 95       	lsr	r24
 560:	86 95       	lsr	r24
 562:	86 95       	lsr	r24
 564:	88 0f       	add	r24, r24
 566:	98 2f       	mov	r25, r24
 568:	99 0f       	add	r25, r25
 56a:	99 0f       	add	r25, r25
 56c:	89 0f       	add	r24, r25
 56e:	68 1b       	sub	r22, r24
 570:	84 e4       	ldi	r24, 0x44	; 68
 572:	0e 94 dd 00 	call	0x1ba	; 0x1ba <segments_write>
 576:	8f e0       	ldi	r24, 0x0F	; 15
 578:	97 e2       	ldi	r25, 0x27	; 39
 57a:	01 97       	sbiw	r24, 0x01	; 1
 57c:	f1 f7       	brne	.-4      	; 0x57a <main+0x176>
 57e:	00 c0       	rjmp	.+0      	; 0x580 <main+0x17c>
 580:	00 00       	nop
				_delay_ms(5);
				SET_BIT(PORTA,0);
 582:	d8 9a       	sbi	0x1b, 0	; 27
				SET_BIT(PORTA,1);
 584:	d9 9a       	sbi	0x1b, 1	; 27
				SET_BIT(PORTA,2);
 586:	da 9a       	sbi	0x1b, 2	; 27
				CLR_BIT(PORTA,3);
 588:	db 98       	cbi	0x1b, 3	; 27
				SET_BIT(PORTA,4);
 58a:	dc 9a       	sbi	0x1b, 4	; 27
				SET_BIT(PORTA,5);
 58c:	dd 9a       	sbi	0x1b, 5	; 27
				segments_write('D', min/10);
 58e:	60 91 6b 00 	lds	r22, 0x006B	; 0x80006b <min>
 592:	6c 9f       	mul	r22, r28
 594:	61 2d       	mov	r22, r1
 596:	11 24       	eor	r1, r1
 598:	66 95       	lsr	r22
 59a:	66 95       	lsr	r22
 59c:	66 95       	lsr	r22
 59e:	84 e4       	ldi	r24, 0x44	; 68
 5a0:	0e 94 dd 00 	call	0x1ba	; 0x1ba <segments_write>
 5a4:	8f e0       	ldi	r24, 0x0F	; 15
 5a6:	97 e2       	ldi	r25, 0x27	; 39
 5a8:	01 97       	sbiw	r24, 0x01	; 1
 5aa:	f1 f7       	brne	.-4      	; 0x5a8 <main+0x1a4>
 5ac:	00 c0       	rjmp	.+0      	; 0x5ae <main+0x1aa>
 5ae:	00 00       	nop
				_delay_ms(5);
			} while (BUTTON_READ('B',0)==0);
 5b0:	60 e0       	ldi	r22, 0x00	; 0
 5b2:	82 e4       	ldi	r24, 0x42	; 66
 5b4:	0e 94 0a 04 	call	0x814	; 0x814 <BUTTON_READ>
 5b8:	88 23       	and	r24, r24
 5ba:	09 f4       	brne	.+2      	; 0x5be <main+0x1ba>
 5bc:	ac cf       	rjmp	.-168    	; 0x516 <main+0x112>
 5be:	9f e7       	ldi	r25, 0x7F	; 127
 5c0:	2a e1       	ldi	r18, 0x1A	; 26
 5c2:	86 e0       	ldi	r24, 0x06	; 6
 5c4:	91 50       	subi	r25, 0x01	; 1
 5c6:	20 40       	sbci	r18, 0x00	; 0
 5c8:	80 40       	sbci	r24, 0x00	; 0
 5ca:	e1 f7       	brne	.-8      	; 0x5c4 <main+0x1c0>
 5cc:	00 c0       	rjmp	.+0      	; 0x5ce <main+0x1ca>
 5ce:	00 00       	nop
			_delay_ms(250);
			do
			{
				if (BUTTON_READ('B',1)==1)
 5d0:	61 e0       	ldi	r22, 0x01	; 1
 5d2:	82 e4       	ldi	r24, 0x42	; 66
 5d4:	0e 94 0a 04 	call	0x814	; 0x814 <BUTTON_READ>
 5d8:	81 30       	cpi	r24, 0x01	; 1
 5da:	59 f4       	brne	.+22     	; 0x5f2 <main+0x1ee>
				{
					Sec=0;
 5dc:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <Sec>
 5e0:	9f e7       	ldi	r25, 0x7F	; 127
 5e2:	2a e1       	ldi	r18, 0x1A	; 26
 5e4:	86 e0       	ldi	r24, 0x06	; 6
 5e6:	91 50       	subi	r25, 0x01	; 1
 5e8:	20 40       	sbci	r18, 0x00	; 0
 5ea:	80 40       	sbci	r24, 0x00	; 0
 5ec:	e1 f7       	brne	.-8      	; 0x5e6 <main+0x1e2>
 5ee:	00 c0       	rjmp	.+0      	; 0x5f0 <main+0x1ec>
 5f0:	00 00       	nop
					_delay_ms(250);
				}
				CLR_BIT(PORTA,0);
 5f2:	d8 98       	cbi	0x1b, 0	; 27
				SET_BIT(PORTA,1);
 5f4:	d9 9a       	sbi	0x1b, 1	; 27
				SET_BIT(PORTA,2);
 5f6:	da 9a       	sbi	0x1b, 2	; 27
				SET_BIT(PORTA,3);
 5f8:	db 9a       	sbi	0x1b, 3	; 27
				SET_BIT(PORTA,4);
 5fa:	dc 9a       	sbi	0x1b, 4	; 27
				SET_BIT(PORTA,5);
 5fc:	dd 9a       	sbi	0x1b, 5	; 27
				segments_write('D', Sec%10);
 5fe:	60 91 6c 00 	lds	r22, 0x006C	; 0x80006c <Sec>
 602:	6c 9f       	mul	r22, r28
 604:	81 2d       	mov	r24, r1
 606:	11 24       	eor	r1, r1
 608:	86 95       	lsr	r24
 60a:	86 95       	lsr	r24
 60c:	86 95       	lsr	r24
 60e:	88 0f       	add	r24, r24
 610:	98 2f       	mov	r25, r24
 612:	99 0f       	add	r25, r25
 614:	99 0f       	add	r25, r25
 616:	89 0f       	add	r24, r25
 618:	68 1b       	sub	r22, r24
 61a:	84 e4       	ldi	r24, 0x44	; 68
 61c:	0e 94 dd 00 	call	0x1ba	; 0x1ba <segments_write>
 620:	8f e0       	ldi	r24, 0x0F	; 15
 622:	97 e2       	ldi	r25, 0x27	; 39
 624:	01 97       	sbiw	r24, 0x01	; 1
 626:	f1 f7       	brne	.-4      	; 0x624 <main+0x220>
 628:	00 c0       	rjmp	.+0      	; 0x62a <main+0x226>
 62a:	00 00       	nop
				_delay_ms(5);
				SET_BIT(PORTA,0);
 62c:	d8 9a       	sbi	0x1b, 0	; 27
				CLR_BIT(PORTA,1);
 62e:	d9 98       	cbi	0x1b, 1	; 27
				SET_BIT(PORTA,2);
 630:	da 9a       	sbi	0x1b, 2	; 27
				SET_BIT(PORTA,3);
 632:	db 9a       	sbi	0x1b, 3	; 27
				SET_BIT(PORTA,4);
 634:	dc 9a       	sbi	0x1b, 4	; 27
				SET_BIT(PORTA,5);
 636:	dd 9a       	sbi	0x1b, 5	; 27
				segments_write('D', Sec/10);
 638:	60 91 6c 00 	lds	r22, 0x006C	; 0x80006c <Sec>
 63c:	6c 9f       	mul	r22, r28
 63e:	61 2d       	mov	r22, r1
 640:	11 24       	eor	r1, r1
 642:	66 95       	lsr	r22
 644:	66 95       	lsr	r22
 646:	66 95       	lsr	r22
 648:	84 e4       	ldi	r24, 0x44	; 68
 64a:	0e 94 dd 00 	call	0x1ba	; 0x1ba <segments_write>
 64e:	8f e0       	ldi	r24, 0x0F	; 15
 650:	97 e2       	ldi	r25, 0x27	; 39
 652:	01 97       	sbiw	r24, 0x01	; 1
 654:	f1 f7       	brne	.-4      	; 0x652 <main+0x24e>
 656:	00 c0       	rjmp	.+0      	; 0x658 <main+0x254>
 658:	00 00       	nop
				_delay_ms(5);
			} while (BUTTON_READ('B',0)==0);
 65a:	60 e0       	ldi	r22, 0x00	; 0
 65c:	82 e4       	ldi	r24, 0x42	; 66
 65e:	0e 94 0a 04 	call	0x814	; 0x814 <BUTTON_READ>
 662:	88 23       	and	r24, r24
 664:	09 f4       	brne	.+2      	; 0x668 <main+0x264>
 666:	b4 cf       	rjmp	.-152    	; 0x5d0 <main+0x1cc>
 668:	9f e7       	ldi	r25, 0x7F	; 127
 66a:	2a e1       	ldi	r18, 0x1A	; 26
 66c:	86 e0       	ldi	r24, 0x06	; 6
 66e:	91 50       	subi	r25, 0x01	; 1
 670:	20 40       	sbci	r18, 0x00	; 0
 672:	80 40       	sbci	r24, 0x00	; 0
 674:	e1 f7       	brne	.-8      	; 0x66e <main+0x26a>
 676:	00 c0       	rjmp	.+0      	; 0x678 <main+0x274>
 678:	00 00       	nop
			_delay_ms(250);
		}
		CLR_BIT(PORTA,0);
 67a:	d8 98       	cbi	0x1b, 0	; 27
		SET_BIT(PORTA,1);
 67c:	d9 9a       	sbi	0x1b, 1	; 27
		SET_BIT(PORTA,2);
 67e:	da 9a       	sbi	0x1b, 2	; 27
		SET_BIT(PORTA,3);
 680:	db 9a       	sbi	0x1b, 3	; 27
		SET_BIT(PORTA,4);
 682:	dc 9a       	sbi	0x1b, 4	; 27
		SET_BIT(PORTA,5);
 684:	dd 9a       	sbi	0x1b, 5	; 27
		segments_write('D', Sec%10);
 686:	60 91 6c 00 	lds	r22, 0x006C	; 0x80006c <Sec>
 68a:	6c 9f       	mul	r22, r28
 68c:	81 2d       	mov	r24, r1
 68e:	11 24       	eor	r1, r1
 690:	86 95       	lsr	r24
 692:	86 95       	lsr	r24
 694:	86 95       	lsr	r24
 696:	88 0f       	add	r24, r24
 698:	98 2f       	mov	r25, r24
 69a:	99 0f       	add	r25, r25
 69c:	99 0f       	add	r25, r25
 69e:	89 0f       	add	r24, r25
 6a0:	68 1b       	sub	r22, r24
 6a2:	84 e4       	ldi	r24, 0x44	; 68
 6a4:	0e 94 dd 00 	call	0x1ba	; 0x1ba <segments_write>
 6a8:	8f e0       	ldi	r24, 0x0F	; 15
 6aa:	97 e2       	ldi	r25, 0x27	; 39
 6ac:	01 97       	sbiw	r24, 0x01	; 1
 6ae:	f1 f7       	brne	.-4      	; 0x6ac <main+0x2a8>
 6b0:	00 c0       	rjmp	.+0      	; 0x6b2 <main+0x2ae>
 6b2:	00 00       	nop
		_delay_ms(5);
		SET_BIT(PORTA,0);
 6b4:	d8 9a       	sbi	0x1b, 0	; 27
		CLR_BIT(PORTA,1);
 6b6:	d9 98       	cbi	0x1b, 1	; 27
		SET_BIT(PORTA,2);
 6b8:	da 9a       	sbi	0x1b, 2	; 27
		SET_BIT(PORTA,3);
 6ba:	db 9a       	sbi	0x1b, 3	; 27
		SET_BIT(PORTA,4);
 6bc:	dc 9a       	sbi	0x1b, 4	; 27
		SET_BIT(PORTA,5);
 6be:	dd 9a       	sbi	0x1b, 5	; 27
		segments_write('D', Sec/10);
 6c0:	60 91 6c 00 	lds	r22, 0x006C	; 0x80006c <Sec>
 6c4:	6c 9f       	mul	r22, r28
 6c6:	61 2d       	mov	r22, r1
 6c8:	11 24       	eor	r1, r1
 6ca:	66 95       	lsr	r22
 6cc:	66 95       	lsr	r22
 6ce:	66 95       	lsr	r22
 6d0:	84 e4       	ldi	r24, 0x44	; 68
 6d2:	0e 94 dd 00 	call	0x1ba	; 0x1ba <segments_write>
 6d6:	8f e0       	ldi	r24, 0x0F	; 15
 6d8:	97 e2       	ldi	r25, 0x27	; 39
 6da:	01 97       	sbiw	r24, 0x01	; 1
 6dc:	f1 f7       	brne	.-4      	; 0x6da <main+0x2d6>
 6de:	00 c0       	rjmp	.+0      	; 0x6e0 <main+0x2dc>
 6e0:	00 00       	nop
		_delay_ms(5);
		SET_BIT(PORTA,0);
 6e2:	d8 9a       	sbi	0x1b, 0	; 27
		SET_BIT(PORTA,1);
 6e4:	d9 9a       	sbi	0x1b, 1	; 27
		CLR_BIT(PORTA,2);
 6e6:	da 98       	cbi	0x1b, 2	; 27
		SET_BIT(PORTA,3);
 6e8:	db 9a       	sbi	0x1b, 3	; 27
		SET_BIT(PORTA,4);
 6ea:	dc 9a       	sbi	0x1b, 4	; 27
		SET_BIT(PORTA,5);
 6ec:	dd 9a       	sbi	0x1b, 5	; 27
		segments_write('D', min%10);
 6ee:	60 91 6b 00 	lds	r22, 0x006B	; 0x80006b <min>
 6f2:	6c 9f       	mul	r22, r28
 6f4:	81 2d       	mov	r24, r1
 6f6:	11 24       	eor	r1, r1
 6f8:	86 95       	lsr	r24
 6fa:	86 95       	lsr	r24
 6fc:	86 95       	lsr	r24
 6fe:	88 0f       	add	r24, r24
 700:	98 2f       	mov	r25, r24
 702:	99 0f       	add	r25, r25
 704:	99 0f       	add	r25, r25
 706:	89 0f       	add	r24, r25
 708:	68 1b       	sub	r22, r24
 70a:	84 e4       	ldi	r24, 0x44	; 68
 70c:	0e 94 dd 00 	call	0x1ba	; 0x1ba <segments_write>
 710:	8f e0       	ldi	r24, 0x0F	; 15
 712:	97 e2       	ldi	r25, 0x27	; 39
 714:	01 97       	sbiw	r24, 0x01	; 1
 716:	f1 f7       	brne	.-4      	; 0x714 <main+0x310>
 718:	00 c0       	rjmp	.+0      	; 0x71a <main+0x316>
 71a:	00 00       	nop
		_delay_ms(5);
		SET_BIT(PORTA,0);
 71c:	d8 9a       	sbi	0x1b, 0	; 27
		SET_BIT(PORTA,1);
 71e:	d9 9a       	sbi	0x1b, 1	; 27
		SET_BIT(PORTA,2);
 720:	da 9a       	sbi	0x1b, 2	; 27
		CLR_BIT(PORTA,3);
 722:	db 98       	cbi	0x1b, 3	; 27
		SET_BIT(PORTA,4);
 724:	dc 9a       	sbi	0x1b, 4	; 27
		SET_BIT(PORTA,5);
 726:	dd 9a       	sbi	0x1b, 5	; 27
		segments_write('D', min/10);
 728:	60 91 6b 00 	lds	r22, 0x006B	; 0x80006b <min>
 72c:	6c 9f       	mul	r22, r28
 72e:	61 2d       	mov	r22, r1
 730:	11 24       	eor	r1, r1
 732:	66 95       	lsr	r22
 734:	66 95       	lsr	r22
 736:	66 95       	lsr	r22
 738:	84 e4       	ldi	r24, 0x44	; 68
 73a:	0e 94 dd 00 	call	0x1ba	; 0x1ba <segments_write>
 73e:	8f e0       	ldi	r24, 0x0F	; 15
 740:	97 e2       	ldi	r25, 0x27	; 39
 742:	01 97       	sbiw	r24, 0x01	; 1
 744:	f1 f7       	brne	.-4      	; 0x742 <main+0x33e>
 746:	00 c0       	rjmp	.+0      	; 0x748 <main+0x344>
 748:	00 00       	nop
		_delay_ms(5);
		SET_BIT(PORTA,0);
 74a:	d8 9a       	sbi	0x1b, 0	; 27
		SET_BIT(PORTA,1);
 74c:	d9 9a       	sbi	0x1b, 1	; 27
		SET_BIT(PORTA,2);
 74e:	da 9a       	sbi	0x1b, 2	; 27
		SET_BIT(PORTA,3);
 750:	db 9a       	sbi	0x1b, 3	; 27
		CLR_BIT(PORTA,4);
 752:	dc 98       	cbi	0x1b, 4	; 27
		SET_BIT(PORTA,5);
 754:	dd 9a       	sbi	0x1b, 5	; 27
		segments_write('D', hour%10);
 756:	60 91 6a 00 	lds	r22, 0x006A	; 0x80006a <__data_end>
 75a:	6c 9f       	mul	r22, r28
 75c:	81 2d       	mov	r24, r1
 75e:	11 24       	eor	r1, r1
 760:	86 95       	lsr	r24
 762:	86 95       	lsr	r24
 764:	86 95       	lsr	r24
 766:	88 0f       	add	r24, r24
 768:	98 2f       	mov	r25, r24
 76a:	99 0f       	add	r25, r25
 76c:	99 0f       	add	r25, r25
 76e:	89 0f       	add	r24, r25
 770:	68 1b       	sub	r22, r24
 772:	84 e4       	ldi	r24, 0x44	; 68
 774:	0e 94 dd 00 	call	0x1ba	; 0x1ba <segments_write>
 778:	8f e0       	ldi	r24, 0x0F	; 15
 77a:	97 e2       	ldi	r25, 0x27	; 39
 77c:	01 97       	sbiw	r24, 0x01	; 1
 77e:	f1 f7       	brne	.-4      	; 0x77c <main+0x378>
 780:	00 c0       	rjmp	.+0      	; 0x782 <main+0x37e>
 782:	00 00       	nop
		_delay_ms(5);
		SET_BIT(PORTA,0);
 784:	d8 9a       	sbi	0x1b, 0	; 27
		SET_BIT(PORTA,1);
 786:	d9 9a       	sbi	0x1b, 1	; 27
		SET_BIT(PORTA,2);
 788:	da 9a       	sbi	0x1b, 2	; 27
		SET_BIT(PORTA,3);
 78a:	db 9a       	sbi	0x1b, 3	; 27
		SET_BIT(PORTA,4);
 78c:	dc 9a       	sbi	0x1b, 4	; 27
		CLR_BIT(PORTA,5);
 78e:	dd 98       	cbi	0x1b, 5	; 27
		segments_write('D', hour/10);
 790:	60 91 6a 00 	lds	r22, 0x006A	; 0x80006a <__data_end>
 794:	6c 9f       	mul	r22, r28
 796:	61 2d       	mov	r22, r1
 798:	11 24       	eor	r1, r1
 79a:	66 95       	lsr	r22
 79c:	66 95       	lsr	r22
 79e:	66 95       	lsr	r22
 7a0:	84 e4       	ldi	r24, 0x44	; 68
 7a2:	0e 94 dd 00 	call	0x1ba	; 0x1ba <segments_write>
 7a6:	8f e0       	ldi	r24, 0x0F	; 15
 7a8:	97 e2       	ldi	r25, 0x27	; 39
 7aa:	01 97       	sbiw	r24, 0x01	; 1
 7ac:	f1 f7       	brne	.-4      	; 0x7aa <main+0x3a6>
 7ae:	00 c0       	rjmp	.+0      	; 0x7b0 <main+0x3ac>
 7b0:	00 00       	nop
		_delay_ms(5);
		if (Sec==60)
 7b2:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <Sec>
 7b6:	8c 33       	cpi	r24, 0x3C	; 60
 7b8:	09 f0       	breq	.+2      	; 0x7bc <main+0x3b8>
 7ba:	3a ce       	rjmp	.-908    	; 0x430 <main+0x2c>
		{
			Sec=0;
 7bc:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <Sec>
			min++;
 7c0:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <min>
 7c4:	8f 5f       	subi	r24, 0xFF	; 255
 7c6:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <min>
			if (min==60)
 7ca:	8c 33       	cpi	r24, 0x3C	; 60
 7cc:	09 f0       	breq	.+2      	; 0x7d0 <main+0x3cc>
 7ce:	30 ce       	rjmp	.-928    	; 0x430 <main+0x2c>
			{
				min=0;
 7d0:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <min>
				hour++;
 7d4:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__data_end>
 7d8:	8f 5f       	subi	r24, 0xFF	; 255
 7da:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__data_end>
				if (hour==24)
 7de:	88 31       	cpi	r24, 0x18	; 24
 7e0:	09 f0       	breq	.+2      	; 0x7e4 <main+0x3e0>
 7e2:	26 ce       	rjmp	.-948    	; 0x430 <main+0x2c>
				{
					hour=0;
 7e4:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <__data_end>
 7e8:	23 ce       	rjmp	.-954    	; 0x430 <main+0x2c>

000007ea <__vector_5>:
		}
    }
}

ISR(TIMER2_OVF_vect)
{
 7ea:	1f 92       	push	r1
 7ec:	0f 92       	push	r0
 7ee:	0f b6       	in	r0, 0x3f	; 63
 7f0:	0f 92       	push	r0
 7f2:	11 24       	eor	r1, r1
 7f4:	8f 93       	push	r24
	Sec++;
 7f6:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <Sec>
 7fa:	8f 5f       	subi	r24, 0xFF	; 255
 7fc:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <Sec>
}
 800:	8f 91       	pop	r24
 802:	0f 90       	pop	r0
 804:	0f be       	out	0x3f, r0	; 63
 806:	0f 90       	pop	r0
 808:	1f 90       	pop	r1
 80a:	18 95       	reti

0000080c <BUTTON_INIT>:
 */ 
#include "DIO.h"

void BUTTON_INIT(unsigned char port, unsigned char pin)
{
	DIO_SETPINDIR(port, pin, 0);
 80c:	40 e0       	ldi	r20, 0x00	; 0
 80e:	0e 94 02 01 	call	0x204	; 0x204 <DIO_SETPINDIR>
 812:	08 95       	ret

00000814 <BUTTON_READ>:
}

unsigned char BUTTON_READ(unsigned char port, unsigned char pin)
{
	unsigned char x;
	x = DIO_READ(port, pin);
 814:	0e 94 72 01 	call	0x2e4	; 0x2e4 <DIO_READ>
	return x;
 818:	08 95       	ret

0000081a <Timer2_OVF_init_interrupt>:
#include <avr/interrupt.h>


void Timer2_OVF_init_interrupt(void)
{
	SET_BIT(ASSR, AS2);
 81a:	82 b5       	in	r24, 0x22	; 34
 81c:	88 60       	ori	r24, 0x08	; 8
 81e:	82 bd       	out	0x22, r24	; 34
	
	SET_BIT(TCCR2,CS20);
 820:	85 b5       	in	r24, 0x25	; 37
 822:	81 60       	ori	r24, 0x01	; 1
 824:	85 bd       	out	0x25, r24	; 37
	SET_BIT(TCCR2,CS22);
 826:	85 b5       	in	r24, 0x25	; 37
 828:	84 60       	ori	r24, 0x04	; 4
 82a:	85 bd       	out	0x25, r24	; 37
	
	sei();
 82c:	78 94       	sei
	SET_BIT(TIMSK, TOIE2);
 82e:	89 b7       	in	r24, 0x39	; 57
 830:	80 64       	ori	r24, 0x40	; 64
 832:	89 bf       	out	0x39, r24	; 57
 834:	08 95       	ret

00000836 <__tablejump2__>:
 836:	ee 0f       	add	r30, r30
 838:	ff 1f       	adc	r31, r31
 83a:	05 90       	lpm	r0, Z+
 83c:	f4 91       	lpm	r31, Z
 83e:	e0 2d       	mov	r30, r0
 840:	09 94       	ijmp

00000842 <_exit>:
 842:	f8 94       	cli

00000844 <__stop_program>:
 844:	ff cf       	rjmp	.-2      	; 0x844 <__stop_program>
